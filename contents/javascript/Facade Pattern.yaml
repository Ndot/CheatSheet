---
title: The Facade Pattern
###############################################
################# PRE CONTENT #################
preContent:
preExample:

###############################################
################### CONTENT ###################
content: |
    <p>Like the name sugests the Facade Pattern is way of presenting a more simplified interface of a more complex code. This pattern provides a convenient higher-level interface to a larger body of code. Think of it as simplifying the API being presented to other developers, something which almost always improves usability.</p>

    <p>Facades are a structural pattern which can often be seen in JavaScript libraries like jQuery where, although an implementation may support methods with a wide range of behaviors, only a "facade" or limited abstraction of these methods is presented to the public for use. For exemple in the jQuery library, most of us are aware that both getElementById("identifier") and $("#identifier") can be used to query an element on a page by its ID.</p>

exampleCode: |

    var module = (function () {

        var _private = {
        
            i: 5,
            mode: 'run',
            get: function () {
                console.log("current value: " + this.i);
            },
            set: function (val) {
                this.i = val;
            },
            run: function () {
                console.log("running");
            },
            jump: function () {
                console.log("jumping");
            }
        };

        return {

            facade: function (args = {}) {
                if (args.val) { _private.set(args.val); }
                _private.get();

                if (args.state) { _private.mode = args.state; }
                _private[_private.mode]();
            }
        };
    }());

    module.facade();
    // current value: 5
    // running

    module.facade({ val: 34, state: 'jump' });
    // current value: 34
    // jumping


body: []
###############################################
################## CONCLUSION #################
conclusion: 
    advantages: []
    disadvantages: 
    - Facades generally have few disadvantages, but one concern worth noting is performance. Namely, one must determine whether there is an implicit cost to the abstraction a Facade offers to our implementation and if so, whether this cost is justifiable.
...
