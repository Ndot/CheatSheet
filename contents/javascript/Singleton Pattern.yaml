---
title: The Singleton Pattern
###############################################
################# PRE CONTENT #################
preContent: 
preExample:

###############################################
################### CONTENT ###################
content: |
    The Singleton pattern is thus known because it restricts instantiation of a class to a single object. Classically, the Singleton pattern can be implemented by creating a class with a method that creates a new instance of the class if one doesn't exist. In the event of an instance already existing, it simply returns a reference to that object. Kinda like the "One ring to rule them all..." sort of analogy..."My Precious"...

exampleCode: |
    var mySingleton = (function () {

        // Instance stores a reference to the Singleton
        var instance;

        function singletonInit() {

            // Singleton

            // Private variables
            var privateVariable     = "Im private";
            var privateRandomNumber = Math.random();

            return {
                // Public variable
                publicProperty: "I am public",
                // Public method that talks to privateRandomNumber
                getRandomNumber: function () {
                    return privateRandomNumber;
                }
            };
        }

        return {
            // Get the Singleton instance if one exists or create one.
            getInstance: function () {
                if (!instance) {
                    instance = singletonInit();
                }
                return instance;
            }
        };
    }());
    // Usage:
 
    var a = mySingleton.getInstance();
    var b = mySingleton.getInstance();
    console.log( a === b ); // true

body: []
###############################################
################## CONCLUSION #################
conclusion: 
    advantages: 
        - Allow us to have control of the instances created, not allowing more then one instance of the class.
    disadvantages:
        - It can be an indication that modules in a system are either tightly coupled or that logic is overly spread across multiple parts of a codebase. 
...
